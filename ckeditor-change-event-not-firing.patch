diff --git a/core/modules/ckeditor5/js/ckeditor5.js b/core/modules/ckeditor5/js/ckeditor5.js
index bd5f3facdf..3160953ee1 100644
--- a/core/modules/ckeditor5/js/ckeditor5.js
+++ b/core/modules/ckeditor5/js/ckeditor5.js
@@ -447,9 +447,22 @@
           editor.model.document.on('change:data', () => {
             const callback = callbacks.get(id);
             if (callback) {
+              if (editor.plugins.has('SourceEditing')) {
+                // If the change:data is being called while in source editing
+                // mode, it means that the form is being submitted. To avoid
+                // race conditions, in this case the callback gets called
+                // without decorating the callback with debounce.
+                // @see https://www.drupal.org/i/3229174
+                // @see Drupal.editorDetach
+                if (editor.plugins.get('SourceEditing').isSourceEditingMode) {
+                  callback();
+                  return;
+                }
+              }
+
               // Marks the field as changed.
               // @see Drupal.editorAttach
-              callback();
+              debounce(callback, 400)();
             }
           });
 
@@ -521,7 +534,7 @@
      *   Callback called with the value of the editor.
      */
     onChange(element, callback) {
-      callbacks.set(getElementId(element), debounce(callback, 400, true));
+      callbacks.set(getElementId(element), callback);
     },
 
     /**
@@ -561,7 +574,7 @@
             const callback = callbacks.get(id);
             if (callback) {
               // Allow modules to update EditorModel by providing the current data.
-              callback(editor.getData());
+              debounce(callback, 400)(editor.getData());
             }
           });
         })
(END)
      *   Callback called with the value of the editor.
      */
     onChange(element, callback) {
-      callbacks.set(getElementId(element), debounce(callback, 400, true));
+      callbacks.set(getElementId(element), callback);
     },
 
     /**
@@ -561,7 +574,7 @@
             const callback = callbacks.get(id);
             if (callback) {
               // Allow modules to update EditorModel by providing the current data.
-              callback(editor.getData());
+              debounce(callback, 400)(editor.getData());
             }
           });
         })
